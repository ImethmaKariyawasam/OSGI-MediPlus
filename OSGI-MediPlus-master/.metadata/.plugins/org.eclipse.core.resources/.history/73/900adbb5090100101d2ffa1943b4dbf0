package com.patientPublisherService;

import com.hospital.core.database.IDatabaseService;

import java.lang.reflect.ParameterizedType;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;

public class PatientServiceImplementation implements IPatientService {
    private IDatabaseService dbService;
    private BundleContext context;
    private Connection connection;
    private static final int MAX_RETRIES = 3;
    private static final int RETRY_DELAY_MS = 1000;
    private static boolean EXISTS=false;

    public PatientServiceImplementation(BundleContext context) {
        this.context = context;
        initializeConnection();
    }

    private void initializeConnection() {
        ServiceReference serviceReference = context.getServiceReference(IDatabaseService.class.getName());
        if (serviceReference != null) {
            dbService = (IDatabaseService) context.getService(serviceReference);
            try {
                connection = dbService.getConnection();
            } catch (SQLException e) {
                System.err.println("Failed to initialize database connection: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private boolean ensureConnection() {
        try {
            if (connection == null || connection.isClosed()) {
                initializeConnection();
            }
            return connection != null && !connection.isClosed();
        } catch (SQLException e) {
            System.err.println("Error checking connection status: " + e.getMessage());
            return false;
        }
    }

    private <T> T executeWithRetry(DatabaseOperation<T> operation) {
        int attempts = 0;
        while (attempts < MAX_RETRIES) {
            try {
                if (!ensureConnection()) {
                    throw new SQLException("Failed to establish database connection");
                }
                return operation.execute(connection);
            } catch (SQLNonTransientConnectionException | SQLRecoverableException e) {
                attempts++;
                System.err.println("Connection error on attempt " + attempts + ": " + e.getMessage());
                if (attempts < MAX_RETRIES) {
                    try {
                        Thread.sleep(RETRY_DELAY_MS);
                        initializeConnection();
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                        break;
                    }
                }
            } catch (SQLException e) {
                System.err.println("SQL error: " + e.getMessage());
                return operation.handleError(e);
            }
        }
        return operation.handleError(new SQLException("Max retry attempts reached"));
    }

    @FunctionalInterface
    private interface DatabaseOperation<T> {
        T execute(Connection conn) throws SQLException;
        @SuppressWarnings("unchecked")
		default T handleError(SQLException e) {
            e.printStackTrace();
            if (Boolean.class.equals(((Class<?>) ((ParameterizedType) getClass()
                .getGenericInterfaces()[0]).getActualTypeArguments()[0]))) {
                return (T) Boolean.FALSE;
            }
            return null;
        }
    }

    @Override
    public boolean addPatient(Patient patient) {
        return executeWithRetry(conn -> {
            String sql = "INSERT INTO patients (name, age, gender, contact, medical_history) VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, patient.getName());
                pstmt.setInt(2, patient.getAge());
                pstmt.setString(3, patient.getGender());
                pstmt.setString(4, patient.getContact());
                pstmt.setString(5, patient.getMedicalHistory());
                return pstmt.executeUpdate() > 0;
            }
        });
    }

    @Override
    public boolean updatePatient(Patient patient) {
        return executeWithRetry(conn -> {
            String sql = "UPDATE patients SET name=?, age=?, gender=?, contact=?, medical_history=? WHERE id=?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, patient.getName());
                pstmt.setInt(2, patient.getAge());
                pstmt.setString(3, patient.getGender());
                pstmt.setString(4, patient.getContact());
                pstmt.setString(5, patient.getMedicalHistory());
                pstmt.setInt(6, patient.getId());
                return pstmt.executeUpdate() > 0;
            }
        });
    }

    @Override
    public boolean deletePatient(int id) {
        return executeWithRetry(conn -> {
            String sql = "DELETE FROM patients WHERE id=?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setInt(1, id);
                return pstmt.executeUpdate() > 0;
            }
        });
    }

    @Override
    public boolean getPatient(int id) {
        return executeWithRetry(conn -> {
            String sql = "SELECT * FROM patients WHERE id=?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setInt(1, id);
                ResultSet rs = pstmt.executeQuery();
                
                if (rs.next()) {
                	EXISTS=true;
                }
                return EXISTS;
            }
        });
    }

    @Override
    public List<Patient> searchPatients(String term) {
        return executeWithRetry(conn -> {
            String sql = "SELECT * FROM patients WHERE name LIKE ? OR contact LIKE ?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                String searchTerm = "%" + term + "%";
                pstmt.setString(1, searchTerm);
                pstmt.setString(2, searchTerm);

                ResultSet rs = pstmt.executeQuery();
                List<Patient> patients = new ArrayList<>();

                while (rs.next()) {
                    patients.add(new Patient(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getInt("age"),
                        rs.getString("gender"),
                        rs.getString("contact"),
                        rs.getString("medical_history")
                    ));
                }
                return patients;
            }
        });
    }

	@Override
	public String getPatientDetails(int id) {
	    return executeWithRetry(conn -> {
	        String sql = "SELECT id, name, age, gender, contact, medical_history FROM patients WHERE id = ?";
	        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
	            pstmt.setInt(1, id);
	            ResultSet rs = pstmt.executeQuery();

	            if (rs.next()) {
	                return "ID: " + rs.getInt("id") +
	                       "\nName: " + rs.getString("name") +
	                       "\nAge: " + rs.getInt("age") +
	                       "\nGender: " + rs.getString("gender") +
	                       "\nContact: " + rs.getString("contact") +
	                       "\nMedical History: " + rs.getString("medical_history");
	            }
	        }
	        return "Patient not found.";
	    });
	}
	
	@Override
	public List<Patient> getAllPatients() {
	    return executeWithRetry(conn -> {
	        List<Patient> patients = new ArrayList<>();
	        String sql = "SELECT id, name, age, gender, contact, medical_history FROM patients";
	        
	        try (PreparedStatement pstmt = conn.prepareStatement(sql);
	             ResultSet rs = pstmt.executeQuery()) {
	            
	            while (rs.next()) {
	                Patient patient = new Patient();
	                patient.setId(rs.getInt("id"));
	                patient.setName(rs.getString("name"));
	                patient.setAge(rs.getInt("age"));
	                patient.setGender(rs.getString("gender"));
	                patient.setContact(rs.getString("contact"));
	                patient.setMedicalHistory(rs.getString("medical_history"));
	                
	                patients.add(patient);
	            }
	        }
	        return patients;
	    });
	}


}