package com.patientPublisherService;

import com.hospital.core.database.IDatabaseService;

import java.lang.reflect.ParameterizedType;
import java.sql.*;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;

public class PatientServiceImplementation implements IPatientService {
    private IDatabaseService dbService;
    private BundleContext context;
    private Connection connection;
    private static final int MAX_RETRIES = 3;
    private static final int RETRY_DELAY_MS = 1000;

    public PatientServiceImplementation(BundleContext context) {
        this.context = context;
        initializeConnection();
    }

    private void initializeConnection() {
        ServiceReference serviceReference = context.getServiceReference(IDatabaseService.class.getName());
        if (serviceReference != null) {
            dbService = (IDatabaseService) context.getService(serviceReference);
            try {
                connection = dbService.getConnection();
            } catch (SQLException e) {
                System.err.println("Failed to initialize database connection: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }

    private boolean ensureConnection() {
        try {
            if (connection == null || connection.isClosed()) {
                initializeConnection();
            }
            return connection != null && !connection.isClosed();
        } catch (SQLException e) {
            System.err.println("Error checking connection status: " + e.getMessage());
            return false;
        }
    }

    private <T> T executeWithRetry(DatabaseOperation<T> operation) {
        int attempts = 0;
        while (attempts < MAX_RETRIES) {
            try {
                if (!ensureConnection()) {
                    throw new SQLException("Failed to establish database connection");
                }
                return operation.execute(connection);
            } catch (SQLNonTransientConnectionException | SQLRecoverableException e) {
                attempts++;
                System.err.println("Connection error on attempt " + attempts + ": " + e.getMessage());
                if (attempts < MAX_RETRIES) {
                    try {
                        Thread.sleep(RETRY_DELAY_MS);
                        initializeConnection();
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                        break;
                    }
                }
            } catch (SQLException e) {
                System.err.println("SQL error: " + e.getMessage());
                return operation.handleError(e);
            }
        }
        return operation.handleError(new SQLException("Max retry attempts reached"));
    }

    @FunctionalInterface
    private interface DatabaseOperation<T> {
        T execute(Connection conn) throws SQLException;
        @SuppressWarnings("unchecked")
		default T handleError(SQLException e) {
            e.printStackTrace();
            if (Boolean.class.equals(((Class<?>) ((ParameterizedType) getClass()
                .getGenericInterfaces()[0]).getActualTypeArguments()[0]))) {
                return (T) Boolean.FALSE;
            }
            return null;
        }
    }

    @Override
    public boolean addPatient(String name, int age, String gender, String contact, String history) {
        return executeWithRetry(conn -> {
            String sql = "INSERT INTO patients (name, age, gender, contact, medical_history) VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, name);
                pstmt.setInt(2, age);
                pstmt.setString(3, gender);
                pstmt.setString(4, contact);
                pstmt.setString(5, history);
                return pstmt.executeUpdate() > 0;
            }
        });
    }

    @Override
    public boolean updatePatient(int id, String name, int age, String gender, String contact, String history) {
        return executeWithRetry(conn -> {
            String sql = "UPDATE patients SET name=?, age=?, gender=?, contact=?, medical_history=? WHERE id=?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, name);
                pstmt.setInt(2, age);
                pstmt.setString(3, gender);
                pstmt.setString(4, contact);
                pstmt.setString(5, history);
                pstmt.setInt(6, id);
                return pstmt.executeUpdate() > 0;
            }
        });
    }

    @Override
    public boolean deletePatient(int id) {
        return executeWithRetry(conn -> {
            String sql = "DELETE FROM patients WHERE id=?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setInt(1, id);
                return pstmt.executeUpdate() > 0;
            }
        });
    }

    @Override
    public String getPatient(int id) {
        return executeWithRetry(conn -> {
            String sql = "SELECT * FROM patients WHERE id=?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setInt(1, id);
                ResultSet rs = pstmt.executeQuery();
                
                if (rs.next()) {
                    return String.format("Patient ID: %d\nName: %s\nAge: %d\nGender: %s\nContact: %s\nMedical History: %s",
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getInt("age"),
                        rs.getString("gender"),
                        rs.getString("contact"),
                        rs.getString("medical_history")
                    );
                }
                return "Patient not found";
            }
        });
    }

    @Override
    public String searchPatients(String term) {
        return executeWithRetry(conn -> {
            String sql = "SELECT * FROM patients WHERE name LIKE ? OR contact LIKE ?";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                String searchTerm = "%" + term + "%";
                pstmt.setString(1, searchTerm);
                pstmt.setString(2, searchTerm);
                
                ResultSet rs = pstmt.executeQuery();
                StringBuilder result = new StringBuilder();
                
                while (rs.next()) {
                    result.append(String.format(
                        "ID: %d | Name: %s | Age: %d | Gender: %s | Contact: %s\n",
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getInt("age"),
                        rs.getString("gender"),
                        rs.getString("contact")
                    ));
                }
                
                return result.length() > 0 ? result.toString() : "No patients found";
            }
        });
    }
}